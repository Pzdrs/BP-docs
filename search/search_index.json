{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>big ass logo</p> <p>blah, blah, blah</p> <p></p>"},{"location":"dashboard/","title":"The ES-GPS dasbohard","text":"<p>Effective positional data collection relies heavily on the ability to analyze the gathered data post-collection. The ES-GPS dashboard facilitates this analysis by enabling users to query and visualize data on an interactive map. Deploying this dashboard is essential for user access, and this documentation section outlines the prerequisites for deployment. It also provides guides for various deployment options. Once successfully deployed, instructions on utilizing the interface and its features are provided at the conclusion of this section.</p>"},{"location":"dashboard/installation/","title":"Installation","text":"<p>You have a two main options for deploying the ESGPS dashboard, depending on your needs. The recommended and most well documented option is Docker. With the help of Docker Compose, you can have the dashboard up and running in a matter of minutes. We offer docker images for a majority of platforms. You can also install and run the dashboard from source if Docker is not your thing.</p>"},{"location":"dashboard/installation/docker/","title":"Docker Installation","text":"<p>docker install</p>"},{"location":"dashboard/installation/source/","title":"Source Installation","text":"<p>source install</p>"},{"location":"dashboard/prerequisites/","title":"Prerequisites","text":"<p>Before even getting to the deployment process, a few prerequisites need to be established. The application mainly relies on a database for storing application and positional data and an MQTT broker from which the application will subscribe data.</p>"},{"location":"dashboard/prerequisites/#database","title":"Database","text":"<p>The ES-GPS dashboard used a document-based database MongoDB. Unlike the MQTT server, the connection details must be specified at deploy time, meaning it can't be changed at run time. The connection parameters are passed to the back-end by using environment variables. There are 3 required parameters that must be passed to the back-end in order for it to start:</p> <ul> <li><code>MONGO_HOST</code> (required)      hostname or IP of the database</li> <li><code>MONGO_USERNAME</code> (required)</li> <li><code>MONGO_PASSWORD</code> (required)      if no password is set, an empty string must be passed</li> </ul> <p>With these three parameters, given the server and the database can reach each other over the network, the backend is able to connect to the database. By default, the port 27017 is used to establish the connection, which is the default MongoDB port. If, for some reason, a different port needs to be used, the <code>MONGO_PORT</code> environment variable can be passed to the back-end with the specific port.</p> <p>There are a couple of different ways to deploy a MongoDB instance. One way is to use Mongo Atlas to deploy an instance in the cloud (a free tier is available). Another option is to deploy it yourself. It can be downloaded as a package using your favorite package manager, or Docker can be employed, which makes things much easier. Using plain Docker, a Mongo instance can be spun up with the following command.</p> <pre><code>$ docker run --name some-mongo -d mongo:tag\n</code></pre> <p>In case Docker Compose is used, the following service definition is added to the <code>docker-compose.yaml</code>.</p> <pre><code>mongo:\n    image: mongo\n    restart: always\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: example\n</code></pre> <p>It also may be wise to use bind mounts or volumes in order to persist data across container restarts. More information on that topic can be found in the official documentation.</p>"},{"location":"dashboard/prerequisites/#mqtt-server","title":"MQTT server","text":"<p>The MQTT protocol operates on the principle of a broker and end devices. At its core lies a central server, often termed as a \"broker\" in messaging parlance, which orchestrates data communication among devices. This setup revolves around a publish-subscribe model, wherein publishers\u2014typically data sources like sensors or location tracking devices\u2014transmit data (messages) to the central broker, which manages active subscribers.</p> <p>Each message is published on a so-called topic, an organizational unit within the MQTT architecture. In case of this project, the data sources publish data on the esgps/gnss topic that is then also subscribed to by the application. When a message arrives at the broker, it is relayed to all active subscribers listening to that specific topic. </p> <p>There are many open-source brokers, most notably the following:</p> <ul> <li>Eclipse Mosquitto</li> <li>RabbitMQ</li> <li>HiveMQ</li> <li>Redis (an in-memory database that can be leveraged to act as a message queue)</li> </ul> <p>During development, both Mosquitto and RabbitMQ were used and are, therefore, the officially supported message brokers of this project.</p> <p>In case no preexisting message broker is available, the deployment of one is equally as simple as MongoDB in the previous section. Here is an example of how to deploy a RabbitMQ instance using Docker Compose.</p> <pre><code>version: '3.7'\n\nservices:\n  rabbitmq:\n    image: rabbitmq:tag\n    hostname: my-rabbit\n    container_name: rabbitmq\n    restart: unless-stopped\n    environment:\n      - RABBITMQ_DEFAULT_USER=username\n      - RABBITMQ_DEFAULT_PASS=password\n    ports:\n      - \"5672:5672\"  # RabbitMQ default port\n      - \"1883:1883\" # MQTT\n    command: | \n        \"/bin/bash -c \\\"rabbitmq-plugins enable --offline rabbitmq_mqtt rabbitmq_web_mqtt rabbitmq_amqp1_0; rabbitmq-server\\\"\"\n</code></pre> <p>The details of configuring the MQTT broker at run-time are covered in the Usage chapter.</p>"},{"location":"dashboard/usage/","title":"Usage","text":"<p>usage</p>"},{"location":"data-source/","title":"Data Source","text":"<p>The term Data Source refers to the hardware package flashed with the data source firmware.</p>"},{"location":"data-source/configuration/","title":"Configuration","text":"<p>configuration</p>"},{"location":"data-source/construction/","title":"Construction","text":""},{"location":"data-source/flashing/","title":"Flashing","text":"<p>flashing</p>"},{"location":"data-source/troubleshooting/","title":"Troubleshooting","text":""},{"location":"data-source/troubleshooting/#data-source-literally-does-nothing-after-powering-it-on","title":"Data source literally does nothing after powering it on","text":"<p>asdf</p>"},{"location":"more/development/","title":"Development","text":"<p>development</p>"}]}